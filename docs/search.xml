<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零成本快速搭建个人博客网站</title>
      <link href="/2020/07/19/kuai-su-da-jian-ge-ren-bo-ke/"/>
      <url>/2020/07/19/kuai-su-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>  倒腾了好几天，算是做出了一个有点样子的个人博客网站。便学各位大佬也写一个搭建教程，旨在更简洁地说明博客网站搭建过程，此外也总结一下个人踩坑经验。<br><a href="https://njulhy.com" target="_blank" rel="noopener">博客演示</a>  </p><ul><li><strong>本文主要面向使用 windows 系统，不懂编程的新手小伙伴。</strong>无需懂得 html 以及 git 相关知识即可快速搭建个人博客，如果不懂可以在留言板<strong>留言或联系本人</strong>，会及时解决您的问题。  </li><li>教程内容随意复制使用，引用望您添加参考链接~  </li><li>博客内容除个人信息外都放在 github 上（开源），您只需要 fork 过去并开启 githubpage 便马上能够得到一个能打开的网址了。</li></ul><h2 id="对所使用的一些名词给出解释"><a href="#对所使用的一些名词给出解释" class="headerlink" title="对所使用的一些名词给出解释"></a>对所使用的一些名词给出解释</h2><p>您可以直接跳过本部分，但对之后内容的理解可能会较为晦涩。<br>不建议您点击下文给出的链接深入学习，这会耗费大量的时间。这些链接为了内容的完整性而添加的，链接地址基本都指向中文官方文档，如果只需要搭建博客网站您不必理会。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>流行的版本控制系统。您只需要使用几个简单的指令即可完成博客网站的搭建更新。深入了解点击<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" target="_blank" rel="noopener">这里</a>。</p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>使用 git 来管理的网上仓库。想深入了解可以点击<a href="https://www.githubs.cn/post/what-is-github" target="_blank" rel="noopener">这里</a>。 ###　 githubpage<br>对于一个放置在 github 上的仓库，可以开启 githubpage 来获得一个展示本仓库的网址。网页内容优先识别一级目录的 index.html，如果没有 index.html 则识别 index.markdown。当然一个 html 或 md 文件无法构成一个网站，因此 githubpage 可以选择读取一级目录 docs 来展示仓库内容，这样 html、css、js 等文件就可以构成一个静态网站。</p><h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>所有数据都预先部署完毕的网站。内容相对稳定，没有数据库的支持。对于个人博客网站来说无需数据库支持，直接将网站数据放置在 github 网站即可。此外静态网站有容易被搜索引擎收录等优势，因此现在广泛流行的动态网站有向静态网站转化的趋势。我们常见的网址上面都带有问号，这可以视为动态网站的标志。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>包管理器。本文需要使用 npm(当然也可以选择<a href="https://classic.yarnpkg.com/zh-Hans/docs/getting-started" target="_blank" rel="noopener">yarn</a>,简单的命令是类似的)来安装依赖包。深入了解 npm 点击<a href="https://www.npmjs.cn/getting-started/what-is-npm/" target="_blank" rel="noopener">这里</a>，深入了解 yarn 点击<a href="https://classic.yarnpkg.com/zh-Hant/docs/getting-started" target="_blank" rel="noopener">这里</a>。</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>JavaScript 环境。由于现在的<strong>npm</strong>集成在 nodejs 里，下载 nodejs 即可使用 npm 命令。深入了解点击<a href="https://nodejs.org/zh-cn/docs/guides/getting-started-guide/" target="_blank" rel="noopener">这里</a>和<a href="https://www.zhihu.com/question/33578075" target="_blank" rel="noopener">这里</a>，后者是知乎用户对 nodejs 介绍的翻译。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是一个基于Node.js的快速、简单且强大的静态网站框架。Hexo 使用 Markdown（或其他标记语言）解析您的文章，能在短短几秒内通过预定义的主题生成静态框架。深入了解点击<a href="https://hexo.io/zh-tw/docs/" target="_blank" rel="noopener">这里</a></p><h3 id="包-package-或称模块-module"><a href="#包-package-或称模块-module" class="headerlink" title="包(package)(或称模块(module))"></a>包(package)(或称模块(module))</h3><p>代码通过包来共享，一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json。通过<strong>包管理器</strong>您可以使用全世界开发者的代码，或者分享自己的代码。</p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>下面使用到的主要名词在上一部分给出了解释，需要了解请移步上一部分。</p><h3 id="1-安装git和nodejs"><a href="#1-安装git和nodejs" class="headerlink" title="1.安装git和nodejs"></a>1.安装git和nodejs</h3><p>下载git点击[这里]<br>下载nodejs点击[这里]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git命令小结</title>
      <link href="/2020/07/15/git-shi-yong-xiao-jie/"/>
      <url>/2020/07/15/git-shi-yong-xiao-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#git">Git</a><ul><li><a href="#第一件事git-global-setup">第一件事：Git global setup</a></li><li><a href="#基本流程">基本流程</a></li><li><a href="#本地项目远程操作">本地项目远程操作</a><ul><li><a href="#create-a-new-repository">Create a new repository</a></li><li><a href="#将本地项目放入远程仓库">将本地项目放入远程仓库</a></li><li><a href="#existing-git-repository">Existing Git repository</a></li><li><a href="#一些细节">一些细节</a></li></ul></li><li><a href="#简单操作">简单操作</a></li></ul></li><li><a href="#vim">Vim</a><ul><li><a href="#插入模式">插入模式</a></li><li><a href="#保存退出">保存退出</a></li></ul></li></ul><!-- /TOC --><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></li><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">文档（使用指南）</a></li></ul><h3 id="第一件事：Git-global-setup"><a href="#第一件事：Git-global-setup" class="headerlink" title="第一件事：Git global setup"></a>第一件事：Git global setup</h3><p>设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p><pre><code>git config --global user.name "Your Name"git config --global user.email “email@example.com”</code></pre><p>如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ul><li>先发出命令，重要的是 add, rm</li><li>提交命令 commit</li><li>pull/push # github desktop 易于操作</li></ul><h3 id="本地项目远程操作"><a href="#本地项目远程操作" class="headerlink" title="本地项目远程操作"></a>本地项目远程操作</h3><p><a href="https://blog.csdn.net/u011479200/article/details/81230083" target="_blank" rel="noopener">参考</a></p><h4 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h4><pre><code>git clone .git地址cd yveshe-gittouch README.mdgit add README.mdgit commit -m "add README"git push -u origin master</code></pre><h4 id="将本地项目放入远程仓库"><a href="#将本地项目放入远程仓库" class="headerlink" title="将本地项目放入远程仓库"></a>将本地项目放入远程仓库</h4><pre><code>cd existing_foldergit initgit remote add origin https://gitlab.com/YvesHe/yveshe-git.gitgit add .git commit -m "提交说明"git push -u origin master</code></pre><h4 id="Existing-Git-repository"><a href="#Existing-Git-repository" class="headerlink" title="Existing Git repository"></a>Existing Git repository</h4><pre><code>cd existing_repogit remote rename origin old-origingit remote add origin https://gitlab.com/YvesHe/yveshe-git.gitgit push -u origin --allgit push -u origin --tags</code></pre><h4 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h4><ul><li>拉下来远程仓库<blockquote><p>git remote add origin <a href="https://gitlab.com/YvesHe/yveshe-git.git" target="_blank" rel="noopener">https://gitlab.com/YvesHe/yveshe-git.git</a></p></blockquote></li></ul><p>远程仓库默认名称为一般为 origin</p><ul><li><p>将本地所有分支推向远程仓库</p><blockquote><p>git push -u yveshe-git-remote –all<br>–all 选项代表不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机中.</p></blockquote></li><li><p>登录远程服务器将本地标签推向远程仓库<br>由于使用 git push 命令不会向远程仓库推送标签(tag),这里使用–tags 指明向远程仓库中推送标签</p><blockquote><p>git push -u yveshe-git-remote –tags</p></blockquote></li><li><p>删除服务器上的 master 分支</p><blockquote><p>git push yveshe-git-remote –delete master</p></blockquote></li><li><p>注意事项<br>如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，可以使用–force 来强制推送 git push –force origin<br>另外将本地的分支与指定的远程分支建立追踪关系格式 git branch –set-upstream [local-branch][remote-branch]</p></li></ul><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><pre><code>git init # 将当前目录变为仓库（生成一个./git文件夹）git add [obj] # add后文件，git statusgit diff # 查看工作区和版本库区别git commit -m "command" # command如add, modify, add a line,git log # 查看修改日志git reset command # 如--hard HEAD^回滚一个版本， --hard HEAD~10回滚十个版本git reflog # 查看每一次执行的命令</code></pre><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>i 在光标左侧插入正文<br>a 在光标右侧插入正文<br>o 在光标所在行的下一行增添新行<br>O 在光标所在行的上一行增添新行<br>I 在光标所在行的开头插入<br>A 在光标所在行的末尾插入</p><p>ESC 或 Ctrl+[退出插入模式</p><p>###　保存退出<br>保存</p><blockquote><p>:w</p></blockquote><p>退出</p><blockquote><dl><dt>: q 在未作修改的情况下退出；</dt><dd>q! 放弃所有修改，退出编辑程序。<br>:wq 先保存，后退出</dd></dl></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim, git, learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel_简单公式</title>
      <link href="/2020/07/15/excel/"/>
      <url>/2020/07/15/excel/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#例子">例子</a></li><li><a href="#还款利息器">还款利息器</a></li><li><a href="#if-函数">If 函数</a></li><li><a href="#address-函数">Address 函数</a></li><li><a href="#pmt-公式">PMT 公式</a></li></ul><!-- /TOC --><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>=IF(A15=””,””,IF(A15=$C$9,F14+E15,-PMT($C$8/4,$C$9,$C$7)))</p><p>对特定单元格计算返回值：</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果 <span class="symbol">A15</span> 为空，返回空</span><br><span class="line">否则返回值由以下表达式指定：</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IF</span>(<span class="symbol">A15</span>=<span class="symbol">C9</span>,<span class="symbol">F14</span>+<span class="symbol">E15</span>,-<span class="built_in">PMT</span>(<span class="symbol">C8</span>/<span class="number">4</span>,<span class="symbol">C9</span>,<span class="symbol">C7</span>))</span><br><span class="line">    上式表示</span><br><span class="line"></span><br><span class="line">        如果单元格 <span class="symbol">A15</span> 等于单元格 <span class="symbol">C9</span>，则返回值为 <span class="symbol">F14</span>+<span class="symbol">E15</span>，</span><br><span class="line">        否则返回值由 <span class="built_in">PMT</span> 函数计算：利率为 <span class="symbol">C8</span> 单元格/<span class="number">4</span>，总付款期数由单元格 <span class="symbol">C9</span> 指定，本金由单元格 <span class="symbol">C7</span> 指定</span><br></pre></td></tr></tbody></table></figure><h2 id="还款利息器"><a href="#还款利息器" class="headerlink" title="还款利息器"></a>还款利息器</h2><p><strong>每一期利息</strong></p><blockquote><p>根据上一期的本金计算</p></blockquote><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如点击 <span class="symbol">E15</span> 显示'=<span class="built_in">IF</span>(<span class="symbol">A15</span>=<span class="string">""</span>,<span class="string">""</span>,<span class="symbol">F14</span>*<span class="symbol">C8</span>/<span class="number">4</span>)',结果是 <span class="number">1</span>,<span class="number">998</span>,<span class="number">750.00</span></span><br><span class="line">这里根据上一期的剩余本金 <span class="number">100000000</span> * <span class="number">8%</span> / <span class="number">2</span> 计算得到</span><br><span class="line">因为 excel 本身会将 <span class="number">8%</span>/<span class="number">4</span> 计算成 <span class="number">1.99875%</span>，所以 <span class="symbol">E15</span> 的值由此而来</span><br></pre></td></tr></tbody></table></figure><p><strong>每一期的本金</strong></p><blockquote><p>表示实际减少了剩余本金的值，付款额减去利息</p></blockquote><p><strong>剩余本金</strong></p><blockquote><p>上一期的剩余本金减去该期的本金</p></blockquote><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如 <span class="symbol">F15</span> 显示=<span class="built_in">IF</span>(<span class="symbol">A15</span>=<span class="string">""</span>,<span class="string">""</span>,<span class="symbol">F14</span>-<span class="symbol">D15</span>)</span><br><span class="line">意味由上一期的本金 <span class="number">100000000</span> 减去改期本金 <span class="number">1</span>,<span class="number">656</span>,<span class="number">023.45</span> 得到，如果序号为空则不显示</span><br></pre></td></tr></tbody></table></figure><p><strong>付款额</strong></p><blockquote><p>由 PMT 公式计算得来</p></blockquote><h2 id="If-函数"><a href="#If-函数" class="headerlink" title="If 函数"></a>If 函数</h2><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：对值和期待值进行逻辑比较</span><br><span class="line">语法：<span class="built_in">IF</span>(logical_test, value_if_true, [value_if_false])，当logical_test成立时，返回value_if_true，当logical_test不成立时，返回value_if_false。<span class="built_in">IF</span>函数最多嵌套<span class="number">64</span>个。</span><br></pre></td></tr></tbody></table></figure><h2 id="Address-函数"><a href="#Address-函数" class="headerlink" title="Address 函数"></a>Address 函数</h2><blockquote><p>根据指定行号和列号获得工作表中的某个单元格的地址，如 ADDRESS(2,3) 返回 $C$2</p></blockquote><h2 id="PMT-公式"><a href="#PMT-公式" class="headerlink" title="PMT 公式"></a>PMT 公式</h2><blockquote><p>財務函數之一，可根據定額付款和固定利率計算貸款的付款金額</p></blockquote><img src="/medias/loading/loading.gif" data-original="https://www.masterhsiao.com.tw/ExcelFinance/PMT/Images/Formular.gif"><blockquote><p>PMT(rate, nper, pv, [fv], [type])<br>比率 必要。 這是貸款的利率。<br>nper 必要。 這是貸款的總付款期數。<br>Pv 必要。 這是現值，即未來各期付款現值總額；也稱為本金。<br>Fv 選用。 這是最後一次付款完成後，所能獲得的未來值或現金餘額。 如果省略 fv，則假設其值為 0，也就是說，貸款的未來值是 0。<br>類型 選用。 這是數字 0 (零) 或 1，指出付款期限</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel, office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first article</title>
      <link href="/2020/07/15/first-article/"/>
      <url>/2020/07/15/first-article/</url>
      
        <content type="html"><![CDATA[<h2 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h2><p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags: Typora, Markdown</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/01/hello-world/"/>
      <url>/2020/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> first article </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
